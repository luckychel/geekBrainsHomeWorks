import Foundation

//1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ¬´–æ—á–µ—Ä–µ–¥—å¬ª (queue) c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤.
//2. –î–æ–±–∞–≤–∏—Ç—å –µ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: filter –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤)
//3. * –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π subscript, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil –≤ —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É.

//–ò–≥—Ä–∞ —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞

//—Ç–∏–ø –ø–∞—Ç—Ä–æ–Ω–∞
enum BulletType : String, CaseIterable {
    case Boevoi = "–ë–æ–µ–≤–æ–π"
    case Holostoi = "–•–æ–ª–æ—Å—Ç–æ–π"
}

// –≤ –æ–±–æ–π–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ—ç—Ç–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª.
protocol PistolClipProtocol {
    var type: BulletType {get set}
}

struct PistolClip<T : PistolClipProtocol> {
    private var bullets: [T] = []
    
    //–∫–æ–ª-–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –æ–±–æ–π–º–µ
    var maxCount: Int
    init(maxCount: Int){
        self.maxCount = maxCount
    }
    
    mutating func add(_ bullet: T) {
        guard (bullets.count + 1 <= self.maxCount) else {
            print("\n‚ùå –û–±–æ–π–º–∞ –ø–æ–ª–Ω–∞ –ø–∞—Ç—Ä–æ–Ω–∞–º–∏, –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è")
            return
        }
        print("\n‚úÖ –î–æ–±–∏–≤–∏–ª–∏ \(bullet.type.rawValue) –ø–∞—Ç—Ä–æ–Ω")
        bullets.append(bullet)
    }
    
    mutating func shot(_ index : Int? = nil) -> T?{
        guard (bullets.count > 0) else {
            print("\n‚ùå –û–±–æ–π–º–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—Ä–æ–Ω–æ–≤")
            return nil
        }
        let obj = index != nil ? (index! < bullets.count ? bullets.remove(at: index!) : nil) : bullets.removeFirst()
        
        if (obj != nil)
        {
            print("\nüí•üî´ –í—ã—Å—Ç—Ä–µ–ª \(obj!.type.rawValue.replacingOccurrences(of: "–æ–π", with: "—ã–º")) –ø–∞—Ç—Ä–æ–Ω–æ–º")
            count()
        }
        else {
            print("\n‚ùå –ü–∏—Å—Ç–æ–ª–µ—Ç –Ω–µ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª, –≤ –∏–Ω–¥–µ–∫—Å–µ \(index!) –ø–∞—Ç—Ä–æ–Ω–∞ –Ω–µ—Ç")
        }
        return obj
    }
    
    func count() {
        guard bullets.count > 0 else {
            print("\n‚ö†Ô∏è –í –æ–±–æ–π–º–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ç—Ä–æ–Ω–æ–≤")
            return
        }
        print("\n‚úÖ –í –æ–±–æ–π–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è \(bullets.count) –ø–∞—Ç—Ä–æ–Ω–æ–≤")
    }
    
    func filterBulletType(type: BulletType) {
        guard bullets.count > 0 else {
            print("\n‚ö†Ô∏è –í –æ–±–æ–π–º–µ –Ω–µ—Ç –ø–∞—Ç—Ä–æ–Ω–æ–≤")
            return
        }
        print("\n‚úÖ –í –æ–±–æ–π–º–µ \(bullets.filter{$0.type == type}.count) \(type.rawValue.replacingOccurrences(of: "–æ–π", with: "—ã—Ö")) –ø–∞—Ç—Ä–æ–Ω–æ–≤")
    }
}

// —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å Subscript
extension PistolClip {
    
    subscript(index: Int) -> Void {
        mutating get {
            guard index >= 0 && index < bullets.count else { return } //¬†–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—à–∞—Ç—å –∏ nil, –Ω–æ —Ç–æ–≥–¥–∞ –≤ —á–µ–º –∏–≥—Ä–∞)))
            
            if (bullets[index].type == BulletType.Boevoi)
            {
                print("\n‚ò†Ô∏è –í \(index) —è—á–µ–π–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è \(bullets[index].type.rawValue) –ø–∞—Ç—Ä–æ–Ω")
                shot(index)
            }
            else
            {

                print("\nüòé –í \(index) —è—á–µ–π–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è \(bullets[index].type.rawValue) –ø–∞—Ç—Ä–æ–Ω")
                shot(index)
            }
        }
    }
    
    subscript(indexes: Int...) -> Void {
        var dict : [String: Int] = [:]
        
        for bt in BulletType.allCases {
            dict[bt.rawValue] = 0
        }
        for index in indexes where index < bullets.count {
            dict[bullets[index].type.rawValue]! += 1
        }
        
        for i in dict {
            print("\n‚ÄºÔ∏è –í –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞—Ö \(i.value) \(i.key) –ø–∞—Ç—Ä–æ–Ω–æ–≤")
        }
    }
}

class TulskiiTokarev : PistolClipProtocol {
    var type: BulletType
    init(type: BulletType) {
       self.type = type
    }
}

class DesertEagle : PistolClipProtocol {
    var type: BulletType
    init(type: BulletType) {
       self.type = type
    }
}

var ttGame = PistolClip<TulskiiTokarev>(maxCount: 8)
var deGame = PistolClip<DesertEagle>(maxCount: 9)

ttGame.add(TulskiiTokarev(type: BulletType.Boevoi))
ttGame.add(TulskiiTokarev(type: BulletType.Boevoi))
ttGame.add(TulskiiTokarev(type: BulletType.Holostoi))
ttGame.add(TulskiiTokarev(type: BulletType.Holostoi))
ttGame.add(TulskiiTokarev(type: BulletType.Boevoi))
ttGame.add(TulskiiTokarev(type: BulletType.Holostoi))
ttGame.add(TulskiiTokarev(type: BulletType.Boevoi))
ttGame.add(TulskiiTokarev(type: BulletType.Holostoi))
ttGame.add(TulskiiTokarev(type: BulletType.Boevoi))

ttGame.count()

//–ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç—Ä–µ–ª—è—Ç—å
ttGame.shot()
ttGame[2,4,5]

ttGame.filterBulletType(type: BulletType.Boevoi)
ttGame.filterBulletType(type: BulletType.Holostoi)

//—Å–∞–º–∞ –∏–≥—Ä–∞
ttGame[0]
ttGame[0]
ttGame[3]
