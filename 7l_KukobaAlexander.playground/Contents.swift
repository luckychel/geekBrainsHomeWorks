import Foundation
import PlaygroundSupport

struct Product {
    var name: String
}

struct Item {
    var count: Int
    var price: Double
    var product: Product
    
}
class VendingMachine {
    
    var invetory = [
        "Lays": Item(count: 2, price: 20.0, product: Product(name: "Lays")),
        "Water": Item(count: 3, price: 10.0, product: Product(name: "Water")),
        "Snickers": Item(count: 0, price: 2.0, product: Product(name: "Snickers"))
    ]
    
    var sumCash: Double = 0
    
    func printSumCash() {
        print("\nü§ë üíµ –¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \(sumCash)")
    }
    
    func printAllProducts() {
        guard invetory.values.filter({(p) -> Bool in
            p.count > 0
        }).count > 0 else {
            print("\n‚ùå –ê–≤—Ç–æ–º–∞—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ø—É—Å—Ç–æ–π!")
            return
        }
        
        print("\n‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∞–≤—Ç–æ–º–∞—Ç–µ:")
        for i in invetory.values {
            print("–ü—Ä–æ–¥—É–∫—Ç–∞ \(i.product.name) –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∫–æ–ª-–≤–µ: \(i.count)")
        }
    }
}

enum VendingMachineError: Error {
    case unknownItem
    case outOfStocks(productName: String)
    case insufficientFunds(coinsNeeded: Double)
    
    var localozedDescription: String {
        switch self {
            case .unknownItem:
                return "—Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ."
            case .outOfStocks(productName: let productName):
                return "—Ç–æ–≤–∞—Ä–∞ \(productName) –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
            case .insufficientFunds(coinsNeeded: let coinsNeeded):
                return "–Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤: \(coinsNeeded)"
        }
    }
}

extension VendingMachine {
    
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ throws, –º—ã –º–æ–∂–µ–º –±—ã—Ç—å —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–¥—É–∫—Ç, –∏–ª–∏ –º—ã –≤—ã–∫–∏–Ω–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ guard, —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã throw. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É.
    
    func vendWithThrowError(itemName name: String, coinsDeposite: Double) throws -> (product: Product, cashBack: Double) {
        guard let item = invetory[name] else { throw VendingMachineError.unknownItem }
        guard coinsDeposite >= item.price else { throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposite) }
        guard item.count > 0 else { throw VendingMachineError.outOfStocks(productName: name) }
        
        sumCash += item.price
        
        var newItem = item
        newItem.count -= 1
        invetory[name] = newItem
        
        return (item.product, coinsDeposite > item.price ? coinsDeposite - item.price : 0)
    }
    
    func printProduct(_ item: Product, _ cashBack: Double) {
        print("\n‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–∏—Ç–µ: \(item.name)\(cashBack > 0 ? ". –í–∞—à–∞ —Å–¥–∞—á–∞: \(cashBack)" : "")")
    }
}


let vend = VendingMachine()

do {

    vend.printAllProducts()
    
    var obj = try vend.vendWithThrowError(itemName: "Water", coinsDeposite: 20.0)
    vend.printProduct(obj.product, obj.cashBack)

    vend.printAllProducts()
    
    obj = try vend.vendWithThrowError(itemName: "Water", coinsDeposite: 10.0)
    vend.printProduct(obj.product, obj.cashBack)

    vend.printAllProducts()
    
    obj = try vend.vendWithThrowError(itemName: "Water", coinsDeposite: 10.0)
    vend.printProduct(obj.product, obj.cashBack)

    vend.printAllProducts()
    
    obj = try vend.vendWithThrowError(itemName: "Snickers", coinsDeposite: 2.0)
    vend.printProduct(obj.product, obj.cashBack)
    
} catch {
    if let error = error as? VendingMachineError {
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error.localozedDescription, "\n")
    } else {
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error.localizedDescription)
    }
}

vend.printSumCash()
